{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-the-basic-express-app-guide","title":"Welcome to the Basic Express App guide","text":"<p>Express.js is a fast, minimalist web framework for Node.js, making it easy to build powerful and scalable web applications. Whether you're new to backend development or just getting started with Express, this guide will walk you through the fundamentals of setting up a basic Express app!</p> <p>Node.js (or informally Node) is an open-source, cross-platform runtime environment that allows developers to run JavaScript on the server. Node provides an environment to run scripts server-side to produce dynamic web content for the client.</p> <p>JavaScript is a programming language used to make web pages interactive. It runs in the browser and on the server (with Node.js), allowing developers to create dynamic websites and applications.</p>"},{"location":"#prerequisite-readings","title":"Prerequisite readings:","text":"<ol> <li>Very basic CLI (Command Line Interface) understanding. <p>Basically, knowing where the CLI is located and being able to access it.</p> </li> <li>Some Node.js knowledge. <p>The commands will be given, but it is very much recomended to understand why they are being used.</p> </li> <li>Basic JavaScript knowledge <p>The commands will be given, but it is very much recomended to understand why they are being used.</p> </li> <li>Basic HTML knowledge <p>The text will be given, but it is very much recomended to understand why it is being used.</p> </li> <li>Some GitHub understanding. <p>Understanding how to create a repository. This will only be needed for hosting and a guide will be attached.</p> </li> </ol>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to install and set up Express</li> <li>Creating a basic web server</li> <li>Handling simple routes (GET, POST)</li> <li>Handling different content types in Express</li> <li>Error handling in Express</li> <li>Running the app in a browser</li> <li>Hosting your app</li> </ul>"},{"location":"#why-use-express","title":"Why use Express","text":"<ul> <li>Much simpler than alternatives</li> <li>Nicely integrated with JavaScript</li> <li>Supports hundreds of packages</li> <li>Vast documentation</li> </ul>"},{"location":"#intended-users","title":"Intended users","text":"<p>This guide is designed for beginners who want to learn how to set up and use Express.js to build a simple web server. It is ideal for:</p> <ul> <li>New Developers - Those who are just starting with backend development and want an easy-to-follow introduction to Express.</li> <li>JavaScript Learners - Developers familiar with JavaScript who want to explore how it works on the server-side.</li> <li>Frontend Developers - Those who know HTML, CSS, and JavaScript but want to expand their skill into backend development.</li> <li>Students &amp; Hobbyists - Anyone curious about how to create simple APIs and web applications using Express.js</li> </ul> <p>API(Application Programming Interface) is a way for different applications to communicate with each other. In web development, APIs allow clients (like browsers or mobile apps) to send requests and receive data from a server.</p>"},{"location":"#software-requirements","title":"Software requirements","text":"<ol> <li>Visual Studio Code (VScode) <p>You will most definitely need some sort of IDE (code editing platform). For this guide specifically, Visual Studio Code IDE will be used as it is the most common choice.</p> </li> <li>Node.js <p>If you already have VScode installed, installing Node.js is a simple task. you can follow this guide</p> </li> <li>Browser <p>It is a matter of your choice, whether its Chrome, Firefox, or Tor. You will only need a browser to see how your app looks when launched.</p> </li> </ol>"},{"location":"#express-installation","title":"Express installation","text":""},{"location":"#once-nodejs-is-installed-follow-these-steps-to-install-express","title":"Once Node.js is installed, follow these steps to install Express:","text":"<p>1. Initialize a new Node.js project</p> <p>Open your terminal and run:  <pre><code>npm init -y\n</code></pre></p> <p>This creates a <code>package.json</code> file, which manages your project dependencies.</p> <p>2. Install Express Run the following command to install Express: </p> <pre><code>npm install express\n</code></pre> <p>This will add Express to your project and save it as a dependency.</p>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>To maintain clarity and consistency throughout this guide, we use the following typographical conventions:</p> <ol> <li> <p>Code Blocks - Used for commands, code snippets, and examples.</p> <p>Ex: <pre><code>console.log(\"Hello Express\");\n</code></pre></p> </li> <li> <p>Inline Code - Used for small code elements within a sentence.</p> <p>Ex:</p> <p>Use the <code>app.get()</code> method to define a route.</p> </li> <li> <p>Bold Text - Highlights important terms and concepts.</p> <p>Ex:</p> <p>Middleware functions help process requests before sending a response.</p> </li> <li> <p>Italic Text - Used for emphasis or to introduce new terms.</p> <p>Ex: </p> <p>Express is a lightweight framework for Node.js</p> </li> </ol>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Tip</p> <p>Declares a best practice method.</p> <p>Example: Using req and res instead of request and response <pre><code>app.get('/', (req, res) =&gt; {\nres.send('hello world')\n})\n</code></pre></p> <p>Danger</p> <p>Declares an error/bug or a code vulnerability</p> <p>Example: You should not use api/security codes in your code, instead put them in an .env file</p> <pre><code>git_api_code = 1234Abc\n</code></pre> <p>Success</p> <p>Declares a successful completion/ expected result</p> <p>Example: If you have done everything right, you should see &lt;123&gt; in your terminal</p> <pre><code>console.log('123')\n</code></pre> <p>Example</p> <p>Declares a non-coding related example</p> <p>Example: Describing a folder as a real life folder</p> <p> Taken from Pexels: source </p> <p>Note</p> <p>Declares a note</p>"},{"location":"Glossary/","title":"Glossary","text":"Term Definiton API An API allows different applications to communicate with each other. In Express, APIs are used to handle requests from users and send responses back to them. Backend The backend is the part of a web application that runs on a server. It processes user requests, connects to databases, and sends responses. Express is a tool used to build backend applications. Middleware Middleware is a function that runs between a request being received and the response being sent. It can be used for tasks like checking user authentication, logging activity, or handling errors. Routing Routing is how Express determines what should happen when a user visits a specific URL. Static Files Static files are files like HTML, CSS, images, and JavaScript that don\u2019t change and are sent directly to the user. Express can serve these files using <code>express.static(\"public\")</code>. Dynamic Files Dynamic files are files that change based on user input or other variables. These are often generated using a view engine like EJS or Pug, allowing for content updates without reloading the entire page. EJS (Embedded JavaScript Templates) EJS is a templating engine that lets you embed JavaScript into HTML. It allows dynamic content rendering using <code>&lt;%= variable %&gt;</code> syntax. Status Codes Status codes are numbers in HTTP responses that indicate whether a request was successful or not. Error Handling Error handling is the process of catching and responding to errors in an Express app. A common way to handle errors is using middleware. Server A computer program or device that provides a service to another computer program and its user, also known as the client Hosting Hosting is the process of making your web application accessible on the internet by running it on a server. This can be done using a variety of free or paid services, each with its pros and cons. Environment Variables Environment variables are used to configure settings for different environments (e.g., development, production). They can be set in a <code>.env</code> file and loaded using the <code>dotenv</code> package. Deployment Deployment is the process of making an application available for use on a server. This can involve uploading code to a hosting service like Render, Heroku, or AWS. Node.js Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows you to run JavaScript on the server side. Package Manager A package manager is a tool that automates the process of installing, updating, and managing software packages. npm (Node Package Manager) is commonly used with Node.js. Version Control Version control is a system that records changes to files over time so that you can recall specific versions later. Git is a popular version control system. Repository A repository is a storage location for software packages or code. It can be hosted on platforms like GitHub, GitLab, or Bitbucket."},{"location":"Set-1/","title":"How to Install and Set Up Express &amp; Creating a Basic Web Server","text":""},{"location":"Set-1/#installing-expressjs","title":"Installing Express.js","text":"<p>Before setting up an Express server, you need to install Node.js on your system. If you haven't installed it yet, download and install it from nodejs.org.</p>"},{"location":"Set-1/#step-1-initialize-a-new-nodejs-project","title":"Step 1: Initialize a New Node.js Project","text":"<p>To start, create a new folder for your project and navigate to it in your terminal</p> <p><pre><code>mkdir my-express-app\ncd my-express-app\n</code></pre> Next, Initialize a Node.js project by running: <pre><code>npm init -y\n</code></pre> This will generate a <code>package.json</code> file that manages your project's dependencies.</p> <p></p>"},{"location":"Set-1/#step-2-install-express","title":"Step 2: Install Express","text":"<p>Now, Install Express by running: <pre><code>npm install express\n</code></pre> This command will download and save Express in your project's dependencies.</p> <p> </p>"},{"location":"Set-1/#creating-a-basic-express-server","title":"Creating a Basic Express Server","text":"<p>Once Express is installed, you can create a basic web server.</p>"},{"location":"Set-1/#step-1-create-a-server-file","title":"Step 1: Create a Server File","text":"<p>Inside your project folder, create a new file called <code>server.js</code> and open it in your code editor.</p> <p></p>"},{"location":"Set-1/#step-2-write-basic-express-code","title":"Step 2: Write Basic Express Code","text":"<p>In <code>server.js</code>, add the following code: </p> <pre><code>const express = require(\"express\"); // Import Express\nconst app = express(); // Create an Express app\n\n// Define a basic route\napp.get(\"/\", (req, res) =&gt; {\n    res.send(\"Hello, Express!\");\n});\n\n// Start the server on port 3000\napp.listen(3000, () =&gt; {\n    console.log(\"Server is running on http://localhost:3000\");\n});\n</code></pre> <p>Tip</p> <p>Always use <code>req</code> and <code>res</code> instead of <code>request</code> and <code>response</code> for cleaner and more standard code. <pre><code>app.get(\"/\", (req, res) =&gt; {\n    res.send(\"hello world\");\n});\n</code></pre></p> <p></p>"},{"location":"Set-1/#step-3-run-the-server","title":"Step 3: Run the Server","text":"<p>Save the file and run the following command in your terminal:</p> <pre><code>node server.js\n</code></pre> <p>Success</p> <p>If everything is set up correctly, you should see the message on console: <pre><code>Server is running on http://localhost:3000\n</code></pre></p> <p>Now open your browser and go to http://localhost:3000. You should see the text \"Hello, Express!\" displayed on the page. </p> <p>Example</p> <p></p> <p></p> <p>Success</p> <p>If you've followed all the steps correctly, you should see \"Hello, Express!\" in your browser.</p> <p>This page covers the essential first steps to setting up an Express app.</p> <p>Example</p> <p></p>"},{"location":"Set-2/","title":"Handling simple routes (GET, POST)","text":""},{"location":"Set-2/#welcome-to-routing-in-express","title":"Welcome to routing in Express","text":"<p>Routes in Express define the endpoints of your web application. Each route specifies an HTTP method (GET, POST, etc.) that the server responds to. When a request is made to a route, Express executes the associated function to handle the request and send a response. </p> <p>Example</p> <p>You do not have to understand the topic in depth to follow the tutorial, but simply this is how it works:</p> <p>Request and response are the GET/POST methods that we will be assigning. Server is your computer &amp; your code and browser is your browser.</p> <p> Taken from GOV.UK Prototype Kit: source </p>"},{"location":"Set-2/#difference-between-get-and-post","title":"Difference between GET and POST","text":""},{"location":"Set-2/#get","title":"GET","text":"<p>GET requests are used to retrieve data from the server. Multiple identical requests should have the same effect as a single request.</p> <p>For example, if you request go to this website from your phone and from your laptop, you will get the same information on the same page and url.</p>"},{"location":"Set-2/#post","title":"POST","text":"<p>POST requests are used to send data to the server to create or update a resource. Multiple identical requests can have different effects.</p> <p>For example if you login into your account, and someone else logs into theirs, you both will not get the same profile shown.</p>"},{"location":"Set-2/#lets-start-routing","title":"Lets start routing","text":""},{"location":"Set-2/#get-request","title":"GET request","text":"<p>Lets start by creating a GET request to get a simple form to display. Replace your basic route that sends hello world with this code:     <pre><code>app.get('/', (req, res) =&gt; {\nres.send(`\n&lt;form action=\"/submit\" method=\"POST\"&gt;\n  &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n`);\n});\n</code></pre></p> <p>Notice how we used <code>app.get</code>?  This is how you tell express whether you want to use GET method or POST.</p> <p>Now run it (<code>node server.js</code>) and go to localhost!</p> <p>Danger</p> <p>If you have not stopped hosting the  <code>server.js</code> file, it will not auto-update. To update stop hosting using control+c</p> <p>Success</p> <p>If you have done everything successfully, you should see the following:</p> <p></p>"},{"location":"Set-2/#windows","title":"Windows","text":"<p>Ctrl c</p>"},{"location":"Set-2/#mac","title":"Mac","text":"<p>^c</p> <p>After that run node command again. (<code>node server.js</code>)</p>"},{"location":"Set-2/#post-request","title":"POST request","text":"<p>Now, start by adding another route as well as middleware which we need for POST to work. The middleware is basically a supporting function that the request or repsonse would go through before reaching its final destination. Lets add the middleware before our GET route and a POST route right after our GET request. </p> <p>The middleware in this case is to allow us to use the information that the user inputs to be take out of body of the request and used. </p> <p>Add the following:</p> <pre><code>    // Middleware to parse the body of POST requests\n    app.use(express.urlencoded({ extended: true }));\n\n\n    // YOUR PREVIOUS CODE **********\n    app.get('/', (req, res) =&gt; {\n    res.send(`\n    &lt;form action=\"/submit\" method=\"POST\"&gt;\n      &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n    `);\n    });\n    // *****************************\n\n\n    // Define a POST route to handle form submission\n    app.post('/submit', (req, res) =&gt; {\n    const name = req.body.name;\n    res.send(`Hello, ${name}!`);\n});\n</code></pre> <p>If you did everything right, you should see something like this:</p> <p>Success</p> <p>Of course instead of \"John Doe\", it will be your name.</p> <p></p> <p>Thats it, as easy as that!</p> <p>Tip</p> <p>Idealy, you do not want to use res.send in a POST request.  Because if you go back, refresh and try going to /submit again, you will get an error.</p> <p>This is because you are not sending a POST request, but rather trying to GET /submit route.  Using res.redirect with another GET route would make your POST request stay there</p> <p>Example: Instead of your POST request, use: <pre><code>// Define a POST route to handle form submission\napp.post('/submit', (req, res) =&gt; {\nconst name = req.body.name;\nres.redirect(`/success?name=${name}`);\n});\n\n// Define a GET route to display the success message\napp.get('/success', (req, res) =&gt; {\nconst name = req.query.name;\nres.send(`Success! Hello, ${name}!`);\n});\n</code></pre></p>"},{"location":"Set-3/","title":"Handling Different Content Types &amp; Error Handling in Express","text":""},{"location":"Set-3/#serving-different-content-types-in-express","title":"Serving Different Content Types in Express","text":"<p>Express allows you to serve various types of content, including HTML, EJS, and CSS. Let's explore how to serve these files efficiently by using Express.</p>"},{"location":"Set-3/#why-do-we-need-static-files","title":"Why Do We Need Static Files?","text":"<p>Static files like CSS, JavaScript, and images make websites look better and work smoothly. CSS adds colors and styles, while JavaScript makes the page interactive. Without them, websites would look plain and not respond to user actions. Express helps serve these files so the website loads correctly and works as expected.</p>"},{"location":"Set-3/#serving-static-files-css-images-js","title":"Serving Static Files (CSS, Images, JS)","text":"<p>To serve static file such as CSS, JavaScript, and images, use Express's built-in <code>express.static</code> middleware.</p> <ol> <li>Create a <code>public</code> folder inside your project and place your static files (e.g., <code>styles.css</code>, <code>script.js</code>, <code>images/</code>)</li> <li>Tell express to use the <code>public</code> folder: <pre><code>const express = require(\"express\");\nconst app = express();\n\napp.use(express.static(\"public\")); // Serve static files\n\napp.get(\"/\", (req, res) =&gt; {\n    res.sendFile(__dirname + \"/public/index.html\");\n});\n\napp.listen(3000, () =&gt; {\n    console.log(\"Server is running on http://localhost:3000\");\n});\n</code></pre></li> </ol> <p>Tip</p> <p>Always define your static file directory before routes to avoid conflicts.</p> <p>Now, your CSS, JavaScript, and image files can be accessed directly in the browser.</p> <p></p>"},{"location":"Set-3/#using-ejs-for-dynamic-content","title":"Using EJS for Dynamic Content","text":"<p>EJS (Embedded JavaScript) is a template engine that lets you insert dynamic content into HTML. Instead of writing multiple HTML files for different pages, EJS allows you to reuse a single template and pass data to it. This makes your web app more flexible and efficient. First, install EJS by using your console: <pre><code>npm install ejs\n</code></pre> Then, set up Express to use EJS: <pre><code>app.set(\"view engine\", \"ejs\");\n</code></pre> Create a <code>views</code> folder and an <code>index.ejs</code> file inside it: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Express App&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome, &lt;%= name %&gt;\ud83c\udf89&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Now, modify your route to pass dynamic data: <pre><code>app.get(\"/\", (req, res) =&gt; {\n    res.render(\"index\", { name: \"Express User\"});\n})\n</code></pre> When you visit <code>http://localhost:3000</code>, it will display: Welcome, Express User </p> <p>Success</p> <p> </p> <p></p>"},{"location":"Set-3/#error-handling-http-status-code","title":"Error Handling &amp; HTTP Status Code","text":"<p>When handling requests, it's important to return proper HTTP status codes to indicate success or errors.</p>"},{"location":"Set-3/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<p> <code>200 OK</code> - Request was successful  <code>404 Not Found</code> - The requested resource does not exist  <code>500 Internal Server Error</code> - Something went wrong on the server</p>"},{"location":"Set-3/#handling-404-errors","title":"Handling 404 Errors","text":"<p>If a user tries to access a page that doesn't exist, return a 404 response: <pre><code>app.use((req, res) =&gt; {\n    res.status(404).send(\"404 - Page Not Found\");\n});\n</code></pre></p>"},{"location":"Set-3/#handling-server-errors","title":"Handling Server Errors","text":"<p>For handling unexpected errors, use an error-handling middleware: <pre><code>app.use((err, req, res, next) =&gt; {\n    console.error(err.stack);\n    res.status(500).send(\"500 - Internal Server Error\");\n});\n</code></pre></p> <p>Note</p> <p><code>err</code>: This represents the error that occurred in the application. Express passes the error to this function when something goes wrong.  <code>next</code>: This allows the function to pass the error to the next middleware in the stack if needed, but in this case, we are handling it directly by sending a response.</p> <p>Danger</p> <p>Never expose sensitive information in error messages.</p> <p>Success</p> <p>If you followed the steps, your Express app should now be serving HTML, EJS, CSS, and handling errors correctly.</p> <p>This page provides a foundation for handling different content types and errors in Express.</p>"},{"location":"Set-4/","title":"Hosting your Express app","text":""},{"location":"Set-4/#why-is-this-important","title":"Why is this important \ud83d\udcab","text":"<p>Before you go forward and explore Express on your own, it is important to know one last thing: how to host your app. Although hosting is not a requirement to use Express for your needs, if you ever will try to expand your website past your local machine (your computer), hosting will be unavoidable.</p> <p>Hosting is basically making your app run independant of your computer (on a separate, dedicated server)</p>"},{"location":"Set-4/#services","title":"Services","text":""},{"location":"Set-4/#to-host-your-express-app","title":"To host your Express app:","text":"<ul> <li> <p>You can use a paid service, here are some examples:</p> <ul> <li>Heroku</li> <li>AWS (Amazon Web Services)</li> <li>DigitalOcean</li> </ul> </li> <li> <p>You can use some free services, like:</p> <ul> <li>Render</li> <li>Vercel</li> <li>GitHub Pages (for static sites)</li> </ul> </li> </ul> <p>We are going to use Render for this tutorial.</p>"},{"location":"Set-4/#step-1-create-an-account-on-render","title":"Step 1: Create an account on Render","text":"<p>Go to Render and sign up for a free account.</p>"},{"location":"Set-4/#step-2-create-a-new-file","title":"Step 2: Create a new file","text":"<p>Create a new file if you are starting from scratch, or replace your \"server.js\" in your project directory with the following content: <pre><code>    const express = require(\"express\");\n    const app = express();\n    require('dotenv').config();\n\n    app.get('/', (req, res) =&gt; {\n    if (process.env.HOSTED === 'yes') {\n        res.send('Your app is hosted!');\n    } else {\n        res.send('Your app is running locally.');\n    }\n    });\n\n    app.listen(3000, () =&gt; {\n    console.log(\"Server is running on http://localhost:3000\");\n    });\n</code></pre></p>"},{"location":"Set-4/#env","title":".env","text":"<p>As you can see, we will be using a Node.Js package called dotenv. </p> <p>Dotenv is a package that allows us to pass variables without changing the code. For example, in Render there will be an option to put env files. They will then be refered to in our code. You will see how it works in Step 4.</p> <p>Another reason we are using it is due to GitHub. It warns the user that leaving your passwords or API codes and other sorts of keys is a danger. We want to start building a habit of using env variables so that we do not encouter any problems later on your Express journey.</p> <p>You will need to install it:</p> <pre><code>npm install dotenv\n</code></pre> <p>Run this command in your terminal</p> <p>Now, in the same directory you need to create a file called <code>.env</code> Put this inside of it <pre><code>HOSTED=no\n</code></pre></p>"},{"location":"Set-4/#step-3-upload-to-github","title":"Step 3: Upload to Github","text":"<p>At this point, your working folder should look something like this:</p> <p>Example</p> <p>Your .js file might have a different name, but should be similar</p> <p> </p> <p>Add a <code>.gitignore</code> file to the same folder put <code>node_modules</code> inside of it.</p> <p>This will prevent hundreds of modules you installed from going into your git repository. Because of how Node works, node_modules is a very large file. When someone else want to use your code, they will only need to run <code>npm i</code> to get the modules, so there is no need for node_modules to be uploaded.</p> <p>Now, create a new repository (it can be private or public, but preferably private). If you are not sure how to do this, check this guide out!</p>"},{"location":"Set-4/#step-4-upload-to-render","title":"Step 4: Upload to Render","text":"<ol> <li> <p>Last step needed. Go on render and select \"create new web service\"      </p> </li> <li> <p>From the dropdown, select your git repository      </p> </li> <li> <p>Update build and start commands to use <code>npm i</code> and <code>node *server.js*</code> </p> </li> <li> <p>Select instance type Free </p> </li> <li> <p>In Environment Variables section, type <code>HOSTED</code> and a value <code>yes</code> </p> </li> </ol> <p>Danger</p> <p>HOSTED should be capitalised as that is what we have put in dotenv. dotenv is case sensitive</p> <ol> <li> <p>Click deploy</p> </li> <li> <p>Open your render website      </p> </li> </ol>"},{"location":"Set-4/#if-you-were-successful-you-should-see-this","title":"If you were successful, you should see this:","text":"<p>Success</p> <p> </p> <p>Successful deployment</p>"},{"location":"Set-4/#congratulations-on-setting-up-your-first-expressjs-app","title":"Congratulations on setting up your first Express.js App!","text":""},{"location":"Troubleshooting/","title":"Troubleshooting","text":"Issue Possible Cause Action <code>Error: Cannot find module 'express'</code> Express is not installed or <code>node_modules</code> is missing Run <code>npm install express</code> to install Express. If the issue continue, try deleting <code>node_modules</code> and <code>package-lock.json</code>, then run <code>npm install</code> again. 404 Not Found for a defined route The port you are trying to use is already in use Change the port number in <code>app.listen(PORT)</code>, or stop the process using the port (<code>npx kill-port 3000</code>). Static Files (CSS, JS, images) are not loading Static file directory is not set correctly. Ensure you have <code>app.use(express.static(\"public\"))</code> and the static files are inside the <code>public</code> folder. Middleware is not working as expected Middleware is not placed in the correct order. Ensure middleware is added before defining routes that depend on it <code>req.body</code> is undefined in POST requests <code>express.json()</code> middleware is missing. Add <code>app.use(express.json())</code> and <code>app.use(express.urlencoded({ extended: true}))</code> before defining routes. <code>Error: Cannot find module 'dotenv'</code> <code>dotenv</code> package is not installed Run <code>npm install dotenv</code> to install the package. Environment variables not working <code>.env</code> file is not loaded or variables are not defined correctly Ensure you have <code>require('dotenv').config()</code> at the top of your <code>server.js</code> file and check the <code>.env</code> file for correct variable definitions. Deployment fails on Render Incorrect build or start commands Ensure the build command is <code>npm install</code> and the start command is <code>node server.js</code> in Render settings. Application not running on Render Environment variable <code>HOSTED</code> is not set Ensure you have set the <code>HOSTED</code> environment variable to <code>yes</code> in Render settings. <code>Error: listen EADDRINUSE: address already in use</code> Port 3000 is already in use Change the port number in <code>app.listen(PORT)</code> to a different port or stop the process using port 3000 (<code>npx kill-port 3000</code>)."}]}